import o from 'ospec';
import { Huffman } from '..';

const PacketData = [
  241,
  175,
  2,
  200,
  67,
  131,
  70,
  125,
  249,
  173,
  108,
  101,
  6,
  230,
  71,
  101,
  240,
  172,
  133,
  115,
  36,
  160,
  78,
  118,
  60,
  16,
  195,
  184,
  21,
  64,
  116,
  104,
  215,
  52,
  173,
  140,
  176,
  70,
  34,
  4,
  131,
  99,
  227,
  200,
  126,
  93,
  27,
  143,
  66,
  169,
  8,
  61,
  152,
  24,
  134,
  148,
  64,
  85,
  0,
  110,
  104,
  159,
  154,
  86,
  198,
  88,
  33,
  17,
  2,
  65,
  177,
  241,
  229,
  10,
  80,
  125,
  32,
  10,
  4,
  48,
  238,
  5,
  80,
  6,
  230,
  134,
  220,
  210,
  182,
  50,
  200,
  33,
  16,
  36,
  7,
  135,
  199,
  148,
  41,
  96,
  8,
  42,
  173,
  30,
  219,
  2,
  168,
  26,
  52,
  55,
  230,
  146,
  2,
  50,
  200,
  160,
  229,
  16,
  116,
  125,
  112,
  44,
  132,
  0,
  57,
  199,
  191,
  53,
  70,
  181,
  0,
  202,
  90,
  66,
  180,
  28,
  155,
  33,
  14,
  64,
  49,
  14,
  96,
  24,
  220,
  140,
  70,
  12,
  3,
  18,
  213,
  96,
  212,
  31,
  0,
  167,
  40,
  150,
  202,
  34,
  1,
  72,
  45,
  10,
  0,
  89,
  146,
  57,
  161,
  31,
  160,
  56,
  231,
  18,
  2,
  50,
  156,
  78,
  209,
  13,
  135,
  215,
  2,
  204,
  145,
  205,
  9,
  29,
  1,
  199,
  56,
  144,
  17,
  148,
  225,
  115,
  180,
  66,
  217,
  245,
  192,
  178,
  16,
  232,
  208,
  54,
  247,
  230,
  181,
  177,
  148,
  83,
  64,
  104,
  18,
  10,
  200,
  151,
  72,
  158,
  19,
  139,
  67,
  202,
  33,
  116,
  46,
  138,
  0,
  89,
  8,
  120,
  104,
  27,
  251,
  243,
  90,
  216,
  202,
  21,
  8,
  199,
  101,
  240,
  172,
  133,
  112,
  122,
  5,
  132,
  209,
  40,
  156,
  89,
  62,
  1,
  204,
  199,
  164,
  193,
  128,
  80,
  2,
  168,
  3,
  115,
  67,
  158,
  105,
  91,
  25,
  105,
  128,
  209,
  88,
  111,
  68,
  186,
  67,
  152,
  232,
  44,
  45,
  11,
  2,
  128,
  21,
  64,
  209,
  162,
  142,
  105,
  32,
  17,
  140,
  177,
  172,
  121,
  66,
  30,
  159,
  92,
  11,
  33,
  15,
  141,
  14,
  189,
  249,
  173,
  108,
  101,
  64,
  106,
  180,
  60,
  7,
  40,
  87,
  22,
  192,
  34,
  233,
  200,
  66,
  16,
  208,
  140,
  16,
  132,
  161,
  144,
  49,
  5,
  18,
  64,
  98,
  58,
  2,
  168,
  20,
  26,
  29,
  243,
  74,
  216,
  203,
  3,
  162,
  32,
  72,
  54,
  62,
  60,
  152,
  39,
  7,
  205,
  33,
  39,
  10,
  198,
  32,
  85,
  176,
  42,
  70,
  104,
  208,
  56,
  230,
  136,
  8,
  8,
  202,
  141,
  10,
  212,
  34,
  73,
  245,
  192,
  169,
  25,
  163,
  64,
  231,
  154,
  32,
  32,
  35,
  42,
  50,
  50,
  212,
  34,
  73,
  245,
  192,
  169,
  25,
  163,
  64,
  235,
  154,
  72,
  8,
  202,
  140,
  217,
  106,
  17,
  36,
  250,
  224,
  84,
  140,
  209,
  160,
  119,
  205,
  36,
  4,
  101,
  70,
  161,
  106,
  17,
  36,
  250,
  224,
];

o.spec('Huffman', () => {
  o('should decompress single header', () => {
    const res = Huffman.decompress([6, 122, 4, 100, 187, 188]);
    o(res).deepEquals([1, 0, 4, 8, 48, 0, 1, 1, 0]);

    const headerSize = Huffman.getHeaderSize([6]);
    o(headerSize).equals(1);

    const packetSize = Huffman.getPacketSize([6]);
    o(packetSize).equals(6);
  });

  o('should decompress large buffer', () => {
    const packetSize = Huffman.getPacketSize([241, 175]);
    const headerSize = Huffman.getHeaderSize([241, 175]);
    o(packetSize).equals(431);
    o(headerSize).equals(2);

    const res = Huffman.decompress(PacketData);
    o(res[0]).equals(157);
    o(res[res.length - 1]).equals(2);
    o(res.length).equals(509);
  });
});
